#!/usr/bin/env python3

import subprocess
import argparse
import re

import dateutil.parser


class Filesystem(object):

    def __init__(self, name):
        self.name = name

    @property
    def snapshots(self):
        output = subprocess.check_output([
            'zfs', 'list', '-H', '-d1', '-sname', '-oname', '-tsnapshot', self.name]).decode('utf-8')
        for line in output.split('\n'):
            if line == '': continue
            name, = line.split('\t')
            yield Snapshot(name)

    @property
    def dirname(self):
        return '/'.join(self.name.split('/')[:-1])

    @property
    def basename(self):
        return self.name.split('/')[-1]


class Snapshot(object):

    def __init__(self, full_name):
        self.fs, self.name = full_name.split('@')

    def __repr__(self):
        return '<Snapshot %s on %s>' % (self.name, self.fs)


class Destination(object):

    def __init__(self, spec):
        self.host, self.dir = spec.split(':', 1)

    def get_backups(self, filesystem):
        output = subprocess.check_output([
            'ssh', self.host, 'ls', '--', self.dir + '/' + filesystem.dirname]).decode('utf-8')
        filenames = output.rstrip().split('\n')
        result = []
        incr = []
        for filename in filenames:
            match = re.match(r'([^@]+)@([^@]+)(?:@([^@]+))?\.gz\.gpg$', filename)
            if not match: continue
            if match.group(1) != filesystem.basename: continue
            if match.group(3):
                incr.append(match)
            else:
                try:
                    result.append(next(filter(lambda s: s.name == match.group(2), snapshots)))
                except StopIteration:
                    pass
        # Filter those snapshots in `incr' that have a matching snapshot.
        # Needs to be recursive so that incrementals can refer to other incrementals.
        return result


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('filesystem')
    parser.add_argument('destination')
    args = parser.parse_args()

    fs = Filesystem(args.filesystem)
    snapshots = list(fs.snapshots)
    dest = Destination(args.destination)
    backups = list(dest.get_backups(fs))

    print(backups)
